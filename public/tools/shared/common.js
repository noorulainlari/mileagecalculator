// Common JavaScript functions for all IRS tools

// IRS Rates for 2025
const IRS_RATES_2025 = {
    business: 0.70,
    medical: 0.21,
    charity: 0.14,
    moving: 0.21
};

// Utility Functions
const Utils = {
    // Format currency
    formatCurrency: (amount) => {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        }).format(amount);
    },

    // Format number with commas
    formatNumber: (number, decimals = 1) => {
        return new Intl.NumberFormat('en-US', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(number);
    },

    // Validate numeric input
    validateNumber: (value, min = 0, max = Infinity) => {
        const num = parseFloat(value);
        return !isNaN(num) && num >= min && num <= max;
    },

    // Calculate mileage deduction
    calculateMileageDeduction: (miles, rate) => {
        return miles * rate;
    },

    // Get current date in YYYY-MM-DD format
    getCurrentDate: () => {
        return new Date().toISOString().split('T')[0];
    },

    // Debounce function for input events
    debounce: (func, wait) => {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
};

// Analytics tracking
const Analytics = {
    track: (event, data = {}) => {
        // Track button clicks and tool usage
        if (typeof gtag !== 'undefined') {
            gtag('event', event, {
                event_category: 'IRS Tools',
                event_label: window.location.pathname,
                ...data
            });
        }
        
        // Console log for development
        console.log('Analytics Event:', event, data);
    },

    trackToolUsage: (toolName) => {
        Analytics.track('tool_used', { tool_name: toolName });
    },

    trackExport: (exportType, toolName) => {
        Analytics.track('export_download', { 
            export_type: exportType,
            tool_name: toolName 
        });
    },

    trackCalculation: (toolName, inputData) => {
        Analytics.track('calculation_performed', {
            tool_name: toolName,
            input_count: Object.keys(inputData).length
        });
    }
};

// PDF Export functionality
const PDFExport = {
    generatePDF: (toolName, data, filename) => {
        // This would integrate with jsPDF or similar library
        Analytics.trackExport('pdf', toolName);
        
        // For now, create a simple HTML print version
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>${toolName} - Results</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .header { text-align: center; margin-bottom: 30px; }
                    .result { margin: 20px 0; padding: 15px; background: #f5f5f5; }
                    .disclaimer { margin-top: 30px; font-size: 12px; color: #666; }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>${toolName}</h1>
                    <p>Generated on ${new Date().toLocaleDateString()}</p>
                </div>
                ${data}
                <div class="disclaimer">
                    <p>This calculation is for informational purposes only. Please consult with a tax professional for advice regarding your specific situation.</p>
                    <p>Generated by IRS Mileage Calculator 2025 - irs2025mileagecalculator.com</p>
                </div>
            </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    }
};

// Excel Export functionality
const ExcelExport = {
    generateExcel: (toolName, data, filename) => {
        Analytics.trackExport('excel', toolName);
        
        // Create CSV content (can be opened in Excel)
        let csvContent = "data:text/csv;charset=utf-8,";
        csvContent += data.map(row => row.join(",")).join("\n");
        
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", filename || `${toolName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
};

// Form validation
const FormValidator = {
    validateRequired: (value, fieldName) => {
        if (!value || value.trim() === '') {
            return `${fieldName} is required`;
        }
        return null;
    },

    validateNumber: (value, fieldName, min = 0, max = Infinity) => {
        if (!Utils.validateNumber(value, min, max)) {
            return `${fieldName} must be a valid number between ${min} and ${max}`;
        }
        return null;
    },

    validateEmail: (email) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return 'Please enter a valid email address';
        }
        return null;
    },

    showError: (fieldId, message) => {
        const field = document.getElementById(fieldId);
        const errorDiv = document.getElementById(`${fieldId}-error`) || document.createElement('div');
        
        errorDiv.id = `${fieldId}-error`;
        errorDiv.className = 'error-message';
        errorDiv.style.color = 'var(--error-color)';
        errorDiv.style.fontSize = '0.875rem';
        errorDiv.style.marginTop = '0.25rem';
        errorDiv.textContent = message;
        
        if (!document.getElementById(`${fieldId}-error`)) {
            field.parentNode.appendChild(errorDiv);
        }
        
        field.style.borderColor = 'var(--error-color)';
    },

    clearError: (fieldId) => {
        const field = document.getElementById(fieldId);
        const errorDiv = document.getElementById(`${fieldId}-error`);
        
        if (errorDiv) {
            errorDiv.remove();
        }
        
        field.style.borderColor = 'var(--gray-300)';
    }
};

// Related Tools System
const RelatedTools = {
    // Tool categories and relationships
    toolCategories: {
        'mileage-deduction': [
            'business-mileage-calculator',
            'medical-mileage-calculator', 
            'charity-mileage-calculator',
            'moving-mileage-calculator'
        ],
        'mileage-logs': [
            'daily-mileage-log',
            'weekly-mileage-log',
            'printable-mileage-log',
            'client-visit-logger'
        ],
        'trip-checkers': [
            'commute-vs-business-checker',
            'medical-purpose-checker',
            'business-trip-validator'
        ],
        'comparison-tools': [
            'standard-vs-itemized-comparison',
            'multi-car-deduction-splitter',
            'actual-vs-mileage-comparison'
        ]
    },

    // Get related tools for current tool
    getRelatedTools: (currentTool, category) => {
        const categoryTools = RelatedTools.toolCategories[category] || [];
        const otherTools = categoryTools.filter(tool => tool !== currentTool);
        
        // Add some cross-category popular tools
        const popularTools = [
            'business-mileage-calculator',
            'daily-mileage-log',
            'irs-tax-savings-estimator',
            'audit-proof-report-exporter'
        ].filter(tool => tool !== currentTool && !otherTools.includes(tool));
        
        return [...otherTools.slice(0, 3), ...popularTools.slice(0, 2)].slice(0, 5);
    },

    // Render related tools section
    renderRelatedTools: (currentTool, category, containerId) => {
        const relatedTools = RelatedTools.getRelatedTools(currentTool, category);
        const container = document.getElementById(containerId);
        
        if (!container || relatedTools.length === 0) return;
        
        const toolsData = {
            'business-mileage-calculator': {
                title: 'Business Mileage Calculator',
                description: 'Calculate business travel deductions with 2025 IRS rates',
                icon: 'üöó'
            },
            'medical-mileage-calculator': {
                title: 'Medical Mileage Calculator', 
                description: 'Track medical appointment travel deductions',
                icon: 'üè•'
            },
            'daily-mileage-log': {
                title: 'Daily Mileage Log',
                description: 'Track daily business miles with automatic calculations',
                icon: 'üìÖ'
            },
            'irs-tax-savings-estimator': {
                title: 'IRS Tax Savings Estimator',
                description: 'Estimate total tax savings from mileage deductions',
                icon: 'üí∞'
            },
            'audit-proof-report-exporter': {
                title: 'Audit-Proof Report Exporter',
                description: 'Generate IRS-compliant documentation',
                icon: 'üìã'
            }
            // Add more tool definitions as needed
        };
        
        const html = `
            <div class="related-tools-section">
                <h3>You might also need these tools</h3>
                <div class="related-tools-grid">
                    ${relatedTools.map(toolSlug => {
                        const tool = toolsData[toolSlug];
                        if (!tool) return '';
                        
                        return `
                            <a href="../${toolSlug}/" class="related-tool-card">
                                <div class="tool-icon">${tool.icon}</div>
                                <h4>${tool.title}</h4>
                                <p>${tool.description}</p>
                                <span class="cta-button">Use Tool</span>
                            </a>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
        
        container.innerHTML = html;
    }
};

// Initialize common functionality when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Track page view
    Analytics.track('page_view');
    
    // Add keyboard navigation support
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Tab') {
            document.body.classList.add('keyboard-navigation');
        }
    });
    
    document.addEventListener('mousedown', function() {
        document.body.classList.remove('keyboard-navigation');
    });
});